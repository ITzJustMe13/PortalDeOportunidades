// Mocks generated by Mockito 5.4.4 from annotations
// in frontend/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i23;

import 'package:flutter/material.dart' as _i4;
import 'package:flutter/src/foundation/assertions.dart' as _i24;
import 'package:flutter/src/foundation/diagnostics.dart' as _i5;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:frontend/Enums/Location.dart' as _i17;
import 'package:frontend/Enums/OppCategory.dart' as _i16;
import 'package:frontend/Models/Favorite.dart' as _i10;
import 'package:frontend/Models/Impulse.dart' as _i11;
import 'package:frontend/Models/Opportunity.dart' as _i12;
import 'package:frontend/Models/Reservation.dart' as _i14;
import 'package:frontend/Models/Review.dart' as _i18;
import 'package:frontend/Models/User.dart' as _i9;
import 'package:frontend/Services/opportunity_api_handler.dart' as _i15;
import 'package:frontend/Services/payment_api_handler.dart' as _i19;
import 'package:frontend/Services/payment_service.dart' as _i21;
import 'package:frontend/Services/reservation_api_handler.dart' as _i13;
import 'package:frontend/Services/review_api_handler.dart' as _i20;
import 'package:frontend/Services/user_api_handler.dart' as _i6;
import 'package:frontend/State/LoginState.dart' as _i22;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterSecureStorage_0 extends _i1.SmartFake
    implements _i2.FlutterSecureStorage {
  _FakeFlutterSecureStorage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_3 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_4 extends _i1.SmartFake
    implements _i4.InheritedWidget {
  _FakeInheritedWidget_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_5 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i5.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [UserApiHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserApiHandler extends _i1.Mock implements _i6.UserApiHandler {
  MockUserApiHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUri => (super.noSuchMethod(
        Invocation.getter(#baseUri),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUri),
        ),
      ) as String);

  @override
  set baseUri(String? _baseUri) => super.noSuchMethod(
        Invocation.setter(
          #baseUri,
          _baseUri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.FlutterSecureStorage);

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  void logout() => super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i9.User?> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i9.User?>.value(),
      ) as _i8.Future<_i9.User?>);

  @override
  _i8.Future<_i9.User?> getStoredUser() => (super.noSuchMethod(
        Invocation.method(
          #getStoredUser,
          [],
        ),
        returnValue: _i8.Future<_i9.User?>.value(),
      ) as _i8.Future<_i9.User?>);

  @override
  _i8.Future<int> getStoredUserID() => (super.noSuchMethod(
        Invocation.method(
          #getStoredUserID,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<_i9.User?> getUserByID(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getUserByID,
          [id],
        ),
        returnValue: _i8.Future<_i9.User?>.value(),
      ) as _i8.Future<_i9.User?>);

  @override
  _i8.Future<_i9.User?> createUser(_i9.User? user) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [user],
        ),
        returnValue: _i8.Future<_i9.User?>.value(),
      ) as _i8.Future<_i9.User?>);

  @override
  _i8.Future<bool> deleteUser(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> editUser(
    int? id,
    _i9.User? updatedUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editUser,
          [
            id,
            updatedUser,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i10.Favorite?> addFavorite(_i10.Favorite? favorite) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [favorite],
        ),
        returnValue: _i8.Future<_i10.Favorite?>.value(),
      ) as _i8.Future<_i10.Favorite?>);

  @override
  _i8.Future<_i10.Favorite?> getFavoriteByID(
    int? userId,
    int? opportunityId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavoriteByID,
          [
            userId,
            opportunityId,
          ],
        ),
        returnValue: _i8.Future<_i10.Favorite?>.value(),
      ) as _i8.Future<_i10.Favorite?>);

  @override
  _i8.Future<List<_i10.Favorite>?> getFavorites(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [userId],
        ),
        returnValue: _i8.Future<List<_i10.Favorite>?>.value(),
      ) as _i8.Future<List<_i10.Favorite>?>);

  @override
  _i8.Future<bool> deleteFavoriteById(
    int? userId,
    int? oppId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteById,
          [
            userId,
            oppId,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i11.Impulse?> impulseOpportunity(_i11.Impulse? impulse) =>
      (super.noSuchMethod(
        Invocation.method(
          #impulseOpportunity,
          [impulse],
        ),
        returnValue: _i8.Future<_i11.Impulse?>.value(),
      ) as _i8.Future<_i11.Impulse?>);

  @override
  _i8.Future<List<_i12.Opportunity>?> getCreatedOpportunities(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCreatedOpportunities,
          [userId],
        ),
        returnValue: _i8.Future<List<_i12.Opportunity>?>.value(),
      ) as _i8.Future<List<_i12.Opportunity>?>);

  @override
  _i8.Future<bool> activateAccount(String? token) => (super.noSuchMethod(
        Invocation.method(
          #activateAccount,
          [token],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [ReservationApiHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockReservationApiHandler extends _i1.Mock
    implements _i13.ReservationApiHandler {
  MockReservationApiHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUri => (super.noSuchMethod(
        Invocation.getter(#baseUri),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUri),
        ),
      ) as String);

  @override
  set baseUri(String? _baseUri) => super.noSuchMethod(
        Invocation.setter(
          #baseUri,
          _baseUri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.FlutterSecureStorage);

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  _i8.Future<List<_i14.Reservation>?> getAllActiveReservationsByUserId(
          int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllActiveReservationsByUserId,
          [userId],
        ),
        returnValue: _i8.Future<List<_i14.Reservation>?>.value(),
      ) as _i8.Future<List<_i14.Reservation>?>);

  @override
  _i8.Future<List<_i14.Reservation>?> getAllReservationsByUserId(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllReservationsByUserId,
          [userId],
        ),
        returnValue: _i8.Future<List<_i14.Reservation>?>.value(),
      ) as _i8.Future<List<_i14.Reservation>?>);

  @override
  _i8.Future<_i14.Reservation?> getReservationById(int? reservationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReservationById,
          [reservationId],
        ),
        returnValue: _i8.Future<_i14.Reservation?>.value(),
      ) as _i8.Future<_i14.Reservation?>);

  @override
  _i8.Future<_i14.Reservation?> createReservation(
          _i14.Reservation? reservation) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReservation,
          [reservation],
        ),
        returnValue: _i8.Future<_i14.Reservation?>.value(),
      ) as _i8.Future<_i14.Reservation?>);

  @override
  _i8.Future<bool> deactivateReservation(int? reservationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivateReservation,
          [reservationId],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> editReservation(
    int? reservationId,
    _i14.Reservation? reservation,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editReservation,
          [
            reservationId,
            reservation,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> deleteReservation(int? reservationId) => (super.noSuchMethod(
        Invocation.method(
          #deleteReservation,
          [reservationId],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [OpportunityApiHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpportunityApiHandler extends _i1.Mock
    implements _i15.OpportunityApiHandler {
  MockOpportunityApiHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUri => (super.noSuchMethod(
        Invocation.getter(#baseUri),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUri),
        ),
      ) as String);

  @override
  set baseUri(String? _baseUri) => super.noSuchMethod(
        Invocation.setter(
          #baseUri,
          _baseUri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.FlutterSecureStorage);

  @override
  Duration get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#timeout),
        ),
      ) as Duration);

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  _i8.Future<_i12.Opportunity?> getOpportunityByID(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOpportunityByID,
          [id],
        ),
        returnValue: _i8.Future<_i12.Opportunity?>.value(),
      ) as _i8.Future<_i12.Opportunity?>);

  @override
  _i8.Future<List<_i12.Opportunity>?> getAllOpportunities() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOpportunities,
          [],
        ),
        returnValue: _i8.Future<List<_i12.Opportunity>?>.value(),
      ) as _i8.Future<List<_i12.Opportunity>?>);

  @override
  _i8.Future<List<_i12.Opportunity>?> getAllImpulsedOpportunities() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllImpulsedOpportunities,
          [],
        ),
        returnValue: _i8.Future<List<_i12.Opportunity>?>.value(),
      ) as _i8.Future<List<_i12.Opportunity>?>);

  @override
  _i8.Future<List<_i12.Opportunity>?> getAllOpportunitiesByUserId(
          int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOpportunitiesByUserId,
          [userId],
        ),
        returnValue: _i8.Future<List<_i12.Opportunity>?>.value(),
      ) as _i8.Future<List<_i12.Opportunity>?>);

  @override
  _i8.Future<List<_i12.Opportunity>> searchOpportunities(
    String? keyword,
    int? vacancies,
    double? minPrice,
    double? maxPrice,
    _i16.OppCategory? category,
    _i17.Location? location,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchOpportunities,
          [
            keyword,
            vacancies,
            minPrice,
            maxPrice,
            category,
            location,
          ],
        ),
        returnValue:
            _i8.Future<List<_i12.Opportunity>>.value(<_i12.Opportunity>[]),
      ) as _i8.Future<List<_i12.Opportunity>>);

  @override
  _i8.Future<List<_i18.Review>?> getReviewsByOppId(int? oppId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReviewsByOppId,
          [oppId],
        ),
        returnValue: _i8.Future<List<_i18.Review>?>.value(),
      ) as _i8.Future<List<_i18.Review>?>);

  @override
  _i8.Future<_i12.Opportunity?> createOpportunity(
          _i12.Opportunity? opportunity) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOpportunity,
          [opportunity],
        ),
        returnValue: _i8.Future<_i12.Opportunity?>.value(),
      ) as _i8.Future<_i12.Opportunity?>);

  @override
  _i8.Future<bool> deleteOpportunity(int? oppId) => (super.noSuchMethod(
        Invocation.method(
          #deleteOpportunity,
          [oppId],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> activateOpportunity(int? oppId) => (super.noSuchMethod(
        Invocation.method(
          #activateOpportunity,
          [oppId],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> deactivateOpportunity(int? oppId) => (super.noSuchMethod(
        Invocation.method(
          #deactivateOpportunity,
          [oppId],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> editOpportunity(
    int? oppId,
    _i12.Opportunity? opportunity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editOpportunity,
          [
            oppId,
            opportunity,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [PaymentApiHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentApiHandler extends _i1.Mock implements _i19.PaymentApiHandler {
  MockPaymentApiHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUri => (super.noSuchMethod(
        Invocation.getter(#baseUri),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUri),
        ),
      ) as String);

  @override
  set baseUri(String? _baseUri) => super.noSuchMethod(
        Invocation.setter(
          #baseUri,
          _baseUri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.FlutterSecureStorage);

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  _i8.Future<String?> createReservationCheckoutSession(
          _i14.Reservation? reservation) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReservationCheckoutSession,
          [reservation],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<String?> createImpulseCheckoutSession(_i11.Impulse? impulse) =>
      (super.noSuchMethod(
        Invocation.method(
          #createImpulseCheckoutSession,
          [impulse],
        ),
        returnValue: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);
}

/// A class which mocks [ReviewApiHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockReviewApiHandler extends _i1.Mock implements _i20.ReviewApiHandler {
  MockReviewApiHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUri => (super.noSuchMethod(
        Invocation.getter(#baseUri),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUri),
        ),
      ) as String);

  @override
  set baseUri(String? _baseUri) => super.noSuchMethod(
        Invocation.setter(
          #baseUri,
          _baseUri,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.FlutterSecureStorage);

  @override
  Duration get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#timeout),
        ),
      ) as Duration);

  @override
  _i3.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Client);

  @override
  _i8.Future<_i18.Review?> getReviewById(int? reviewId) => (super.noSuchMethod(
        Invocation.method(
          #getReviewById,
          [reviewId],
        ),
        returnValue: _i8.Future<_i18.Review?>.value(),
      ) as _i8.Future<_i18.Review?>);

  @override
  _i8.Future<List<_i18.Review>> getReviewsByUserId(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReviewsByUserId,
          [userId],
        ),
        returnValue: _i8.Future<List<_i18.Review>>.value(<_i18.Review>[]),
      ) as _i8.Future<List<_i18.Review>>);

  @override
  _i8.Future<_i18.Review?> createReview(_i18.Review? review) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReview,
          [review],
        ),
        returnValue: _i8.Future<_i18.Review?>.value(),
      ) as _i8.Future<_i18.Review?>);

  @override
  _i8.Future<bool> deleteReview(int? reviewId) => (super.noSuchMethod(
        Invocation.method(
          #deleteReview,
          [reviewId],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> editReview(
    int? id,
    _i18.Review? review,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editReview,
          [
            id,
            review,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [PaymentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentService extends _i1.Mock implements _i21.PaymentService {
  MockPaymentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.FlutterSecureStorage);

  @override
  _i8.Future<void> saveImpulse(_i11.Impulse? impulse) => (super.noSuchMethod(
        Invocation.method(
          #saveImpulse,
          [impulse],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> saveReservation(_i14.Reservation? reservation) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveReservation,
          [reservation],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i11.Impulse?> getStoredImpulse() => (super.noSuchMethod(
        Invocation.method(
          #getStoredImpulse,
          [],
        ),
        returnValue: _i8.Future<_i11.Impulse?>.value(),
      ) as _i8.Future<_i11.Impulse?>);

  @override
  _i8.Future<_i14.Reservation?> getStoredReservation() => (super.noSuchMethod(
        Invocation.method(
          #getStoredReservation,
          [],
        ),
        returnValue: _i8.Future<_i14.Reservation?>.value(),
      ) as _i8.Future<_i14.Reservation?>);

  @override
  _i8.Future<void> deleteImpulse() => (super.noSuchMethod(
        Invocation.method(
          #deleteImpulse,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteReservation() => (super.noSuchMethod(
        Invocation.method(
          #deleteReservation,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [LoginState].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginState extends _i1.Mock implements _i22.LoginState {
  MockLoginState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
      ) as bool);

  @override
  String get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> checkToken() => (super.noSuchMethod(
        Invocation.method(
          #checkToken,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> login(
    String? email,
    String? password,
    _i4.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
            context,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addListener(_i23.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i23.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i4.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_3(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i4.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i4.InheritedWidget dependOnInheritedElement(
    _i4.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_4(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i4.InheritedWidget);

  @override
  void visitAncestorElements(_i4.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i4.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i4.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i24.DiagnosticsTreeStyle? style = _i24.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i24.DiagnosticsTreeStyle? style = _i24.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i4.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
    _i4.Route<dynamic>? route,
    _i4.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(
    _i4.Route<dynamic>? route,
    _i4.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i4.Route<dynamic>? route,
    _i4.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i4.Route<dynamic>? newRoute,
    _i4.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i4.Route<dynamic>? route,
    _i4.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
